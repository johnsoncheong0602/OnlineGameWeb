'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="GameDB")>  _
Partial Public Class DataClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertTblMember(instance As TblMember)
    End Sub
  Partial Private Sub UpdateTblMember(instance As TblMember)
    End Sub
  Partial Private Sub DeleteTblMember(instance As TblMember)
    End Sub
  Partial Private Sub InsertTblMemberBank(instance As TblMemberBank)
    End Sub
  Partial Private Sub UpdateTblMemberBank(instance As TblMemberBank)
    End Sub
  Partial Private Sub DeleteTblMemberBank(instance As TblMemberBank)
    End Sub
  Partial Private Sub InsertTblGameAccount(instance As TblGameAccount)
    End Sub
  Partial Private Sub UpdateTblGameAccount(instance As TblGameAccount)
    End Sub
  Partial Private Sub DeleteTblGameAccount(instance As TblGameAccount)
    End Sub
  Partial Private Sub InsertTblTransaction(instance As TblTransaction)
    End Sub
  Partial Private Sub UpdateTblTransaction(instance As TblTransaction)
    End Sub
  Partial Private Sub DeleteTblTransaction(instance As TblTransaction)
    End Sub
  Partial Private Sub InsertTblTransfer(instance As TblTransfer)
    End Sub
  Partial Private Sub UpdateTblTransfer(instance As TblTransfer)
    End Sub
  Partial Private Sub DeleteTblTransfer(instance As TblTransfer)
    End Sub
  Partial Private Sub InsertTblPromotion(instance As TblPromotion)
    End Sub
  Partial Private Sub UpdateTblPromotion(instance As TblPromotion)
    End Sub
  Partial Private Sub DeleteTblPromotion(instance As TblPromotion)
    End Sub
  Partial Private Sub InsertTblBank(instance As TblBank)
    End Sub
  Partial Private Sub UpdateTblBank(instance As TblBank)
    End Sub
  Partial Private Sub DeleteTblBank(instance As TblBank)
    End Sub
  Partial Private Sub InsertTblProduct(instance As TblProduct)
    End Sub
  Partial Private Sub UpdateTblProduct(instance As TblProduct)
    End Sub
  Partial Private Sub DeleteTblProduct(instance As TblProduct)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("GameDBConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property TblMembers() As System.Data.Linq.Table(Of TblMember)
		Get
			Return Me.GetTable(Of TblMember)
		End Get
	End Property
	
	Public ReadOnly Property TblMemberBanks() As System.Data.Linq.Table(Of TblMemberBank)
		Get
			Return Me.GetTable(Of TblMemberBank)
		End Get
	End Property
	
	Public ReadOnly Property TblGameAccounts() As System.Data.Linq.Table(Of TblGameAccount)
		Get
			Return Me.GetTable(Of TblGameAccount)
		End Get
	End Property
	
	Public ReadOnly Property TblTransactions() As System.Data.Linq.Table(Of TblTransaction)
		Get
			Return Me.GetTable(Of TblTransaction)
		End Get
	End Property
	
	Public ReadOnly Property TblTransfers() As System.Data.Linq.Table(Of TblTransfer)
		Get
			Return Me.GetTable(Of TblTransfer)
		End Get
	End Property
	
	Public ReadOnly Property TblPromotions() As System.Data.Linq.Table(Of TblPromotion)
		Get
			Return Me.GetTable(Of TblPromotion)
		End Get
	End Property
	
	Public ReadOnly Property TblBanks() As System.Data.Linq.Table(Of TblBank)
		Get
			Return Me.GetTable(Of TblBank)
		End Get
	End Property
	
	Public ReadOnly Property TblProducts() As System.Data.Linq.Table(Of TblProduct)
		Get
			Return Me.GetTable(Of TblProduct)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblMember")>  _
Partial Public Class TblMember
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserID As Integer
	
	Private _UserName As String
	
	Private _Password As String
	
	Private _Email As String
	
	Private _PhoneNo As String
	
	Private _FullName As String
	
	Private _DateOfBirth As Date
	
	Private _RefCode As String
	
	Private _RefCodeReg As String
	
	Private _VipLevel As Integer
	
	Private _Promotion As Single
	
	Private _DateCreated As Date
	
	Private _LastModified As Date
	
	Private _IPAddress As String
	
	Private _GroupLeaderID As Integer
	
	Private _Enabled As Boolean
	
	Private _Remark As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPhoneNoChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNoChanged()
    End Sub
    Partial Private Sub OnFullNameChanging(value As String)
    End Sub
    Partial Private Sub OnFullNameChanged()
    End Sub
    Partial Private Sub OnDateOfBirthChanging(value As Date)
    End Sub
    Partial Private Sub OnDateOfBirthChanged()
    End Sub
    Partial Private Sub OnRefCodeChanging(value As String)
    End Sub
    Partial Private Sub OnRefCodeChanged()
    End Sub
    Partial Private Sub OnRefCodeRegChanging(value As String)
    End Sub
    Partial Private Sub OnRefCodeRegChanged()
    End Sub
    Partial Private Sub OnVipLevelChanging(value As Integer)
    End Sub
    Partial Private Sub OnVipLevelChanged()
    End Sub
    Partial Private Sub OnPromotionChanging(value As Single)
    End Sub
    Partial Private Sub OnPromotionChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnLastModifiedChanging(value As Date)
    End Sub
    Partial Private Sub OnLastModifiedChanged()
    End Sub
    Partial Private Sub OnIPAddressChanging(value As String)
    End Sub
    Partial Private Sub OnIPAddressChanged()
    End Sub
    Partial Private Sub OnGroupLeaderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnGroupLeaderIDChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnRemarkChanging(value As String)
    End Sub
    Partial Private Sub OnRemarkChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UserID() As Integer
		Get
			Return Me._UserID
		End Get
		Set
			If ((Me._UserID = value)  _
						= false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNo", DbType:="NChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PhoneNo() As String
		Get
			Return Me._PhoneNo
		End Get
		Set
			If (String.Equals(Me._PhoneNo, value) = false) Then
				Me.OnPhoneNoChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNo = value
				Me.SendPropertyChanged("PhoneNo")
				Me.OnPhoneNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me.OnFullNameChanging(value)
				Me.SendPropertyChanging
				Me._FullName = value
				Me.SendPropertyChanged("FullName")
				Me.OnFullNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfBirth", DbType:="Date NOT NULL")>  _
	Public Property DateOfBirth() As Date
		Get
			Return Me._DateOfBirth
		End Get
		Set
			If ((Me._DateOfBirth = value)  _
						= false) Then
				Me.OnDateOfBirthChanging(value)
				Me.SendPropertyChanging
				Me._DateOfBirth = value
				Me.SendPropertyChanged("DateOfBirth")
				Me.OnDateOfBirthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RefCode", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property RefCode() As String
		Get
			Return Me._RefCode
		End Get
		Set
			If (String.Equals(Me._RefCode, value) = false) Then
				Me.OnRefCodeChanging(value)
				Me.SendPropertyChanging
				Me._RefCode = value
				Me.SendPropertyChanged("RefCode")
				Me.OnRefCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RefCodeReg", DbType:="NChar(30)")>  _
	Public Property RefCodeReg() As String
		Get
			Return Me._RefCodeReg
		End Get
		Set
			If (String.Equals(Me._RefCodeReg, value) = false) Then
				Me.OnRefCodeRegChanging(value)
				Me.SendPropertyChanging
				Me._RefCodeReg = value
				Me.SendPropertyChanged("RefCodeReg")
				Me.OnRefCodeRegChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VipLevel", DbType:="Int NOT NULL")>  _
	Public Property VipLevel() As Integer
		Get
			Return Me._VipLevel
		End Get
		Set
			If ((Me._VipLevel = value)  _
						= false) Then
				Me.OnVipLevelChanging(value)
				Me.SendPropertyChanging
				Me._VipLevel = value
				Me.SendPropertyChanged("VipLevel")
				Me.OnVipLevelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Promotion", DbType:="Float NOT NULL")>  _
	Public Property Promotion() As Single
		Get
			Return Me._Promotion
		End Get
		Set
			If ((Me._Promotion = value)  _
						= false) Then
				Me.OnPromotionChanging(value)
				Me.SendPropertyChanging
				Me._Promotion = value
				Me.SendPropertyChanged("Promotion")
				Me.OnPromotionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModified", DbType:="DateTime NOT NULL")>  _
	Public Property LastModified() As Date
		Get
			Return Me._LastModified
		End Get
		Set
			If ((Me._LastModified = value)  _
						= false) Then
				Me.OnLastModifiedChanging(value)
				Me.SendPropertyChanging
				Me._LastModified = value
				Me.SendPropertyChanged("LastModified")
				Me.OnLastModifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPAddress", DbType:="NChar(20)")>  _
	Public Property IPAddress() As String
		Get
			Return Me._IPAddress
		End Get
		Set
			If (String.Equals(Me._IPAddress, value) = false) Then
				Me.OnIPAddressChanging(value)
				Me.SendPropertyChanging
				Me._IPAddress = value
				Me.SendPropertyChanged("IPAddress")
				Me.OnIPAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupLeaderID", DbType:="Int NOT NULL")>  _
	Public Property GroupLeaderID() As Integer
		Get
			Return Me._GroupLeaderID
		End Get
		Set
			If ((Me._GroupLeaderID = value)  _
						= false) Then
				Me.OnGroupLeaderIDChanging(value)
				Me.SendPropertyChanging
				Me._GroupLeaderID = value
				Me.SendPropertyChanged("GroupLeaderID")
				Me.OnGroupLeaderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remark", DbType:="NChar(255)")>  _
	Public Property Remark() As String
		Get
			Return Me._Remark
		End Get
		Set
			If (String.Equals(Me._Remark, value) = false) Then
				Me.OnRemarkChanging(value)
				Me.SendPropertyChanging
				Me._Remark = value
				Me.SendPropertyChanged("Remark")
				Me.OnRemarkChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblMemberBank")>  _
Partial Public Class TblMemberBank
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MemberBankID As Integer
	
	Private _BankName As String
	
	Private _AccountName As String
	
	Private _AccountNo As String
	
	Private _MemberUserName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMemberBankIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMemberBankIDChanged()
    End Sub
    Partial Private Sub OnBankNameChanging(value As String)
    End Sub
    Partial Private Sub OnBankNameChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnAccountNoChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNoChanged()
    End Sub
    Partial Private Sub OnMemberUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnMemberUserNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemberBankID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property MemberBankID() As Integer
		Get
			Return Me._MemberBankID
		End Get
		Set
			If ((Me._MemberBankID = value)  _
						= false) Then
				Me.OnMemberBankIDChanging(value)
				Me.SendPropertyChanging
				Me._MemberBankID = value
				Me.SendPropertyChanged("MemberBankID")
				Me.OnMemberBankIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property BankName() As String
		Get
			Return Me._BankName
		End Get
		Set
			If (String.Equals(Me._BankName, value) = false) Then
				Me.OnBankNameChanging(value)
				Me.SendPropertyChanging
				Me._BankName = value
				Me.SendPropertyChanged("BankName")
				Me.OnBankNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountNo", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property AccountNo() As String
		Get
			Return Me._AccountNo
		End Get
		Set
			If (String.Equals(Me._AccountNo, value) = false) Then
				Me.OnAccountNoChanging(value)
				Me.SendPropertyChanging
				Me._AccountNo = value
				Me.SendPropertyChanged("AccountNo")
				Me.OnAccountNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemberUserName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property MemberUserName() As String
		Get
			Return Me._MemberUserName
		End Get
		Set
			If (String.Equals(Me._MemberUserName, value) = false) Then
				Me.OnMemberUserNameChanging(value)
				Me.SendPropertyChanging
				Me._MemberUserName = value
				Me.SendPropertyChanged("MemberUserName")
				Me.OnMemberUserNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblGameAccount")>  _
Partial Public Class TblGameAccount
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GameID As Integer
	
	Private _UserName As String
	
	Private _Password As String
	
	Private _Product As String
	
	Private _DateCreated As Date
	
	Private _MemberUserName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGameIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnGameIDChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnProductChanging(value As String)
    End Sub
    Partial Private Sub OnProductChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnMemberUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnMemberUserNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GameID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property GameID() As Integer
		Get
			Return Me._GameID
		End Get
		Set
			If ((Me._GameID = value)  _
						= false) Then
				Me.OnGameIDChanging(value)
				Me.SendPropertyChanging
				Me._GameID = value
				Me.SendPropertyChanged("GameID")
				Me.OnGameIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Product", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Product() As String
		Get
			Return Me._Product
		End Get
		Set
			If (String.Equals(Me._Product, value) = false) Then
				Me.OnProductChanging(value)
				Me.SendPropertyChanging
				Me._Product = value
				Me.SendPropertyChanged("Product")
				Me.OnProductChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime NOT NULL")>  _
	Public Property DateCreated() As Date
		Get
			Return Me._DateCreated
		End Get
		Set
			If ((Me._DateCreated = value)  _
						= false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MemberUserName", DbType:="NChar(30)")>  _
	Public Property MemberUserName() As String
		Get
			Return Me._MemberUserName
		End Get
		Set
			If (String.Equals(Me._MemberUserName, value) = false) Then
				Me.OnMemberUserNameChanging(value)
				Me.SendPropertyChanging
				Me._MemberUserName = value
				Me.SendPropertyChanged("MemberUserName")
				Me.OnMemberUserNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblTransaction")>  _
Partial Public Class TblTransaction
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TransactionID As Integer
	
	Private _TransactionDate As Date
	
	Private _UserName As String
	
	Private _Method As String

    Private _Debit As Single

    Private _Credit As Single
	
	Private _Promotion As Single
	
	Private _Reason As String
	
	Private _Product As String
	
	Private _ProductUserName As String
	
	Private _Bank As String
	
	Private _BankAccount As String
	
	Private _UploadFile As String
	
	Private _Status As Integer
	
	Private _IPAddress As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTransactionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTransactionIDChanged()
    End Sub
    Partial Private Sub OnTransactionDateChanging(value As Date)
    End Sub
    Partial Private Sub OnTransactionDateChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnMethodChanging(value As String)
    End Sub
    Partial Private Sub OnMethodChanged()
    End Sub
    Partial Private Sub OnDebitChanging(value As Single)
    End Sub
    Partial Private Sub OnDebitChanged()
    End Sub
    Partial Private Sub OnCreditChanging(value As Single)
    End Sub
    Partial Private Sub OnCreditChanged()
    End Sub
    Partial Private Sub OnPromotionChanging(value As Single)
    End Sub
    Partial Private Sub OnPromotionChanged()
    End Sub
    Partial Private Sub OnReasonChanging(value As String)
    End Sub
    Partial Private Sub OnReasonChanged()
    End Sub
    Partial Private Sub OnProductChanging(value As String)
    End Sub
    Partial Private Sub OnProductChanged()
    End Sub
    Partial Private Sub OnProductUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnProductUserNameChanged()
    End Sub
    Partial Private Sub OnBankChanging(value As String)
    End Sub
    Partial Private Sub OnBankChanged()
    End Sub
    Partial Private Sub OnBankAccountChanging(value As String)
    End Sub
    Partial Private Sub OnBankAccountChanged()
    End Sub
    Partial Private Sub OnUploadFileChanging(value As String)
    End Sub
    Partial Private Sub OnUploadFileChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Integer)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnIPAddressChanging(value As String)
    End Sub
    Partial Private Sub OnIPAddressChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TransactionID() As Integer
		Get
			Return Me._TransactionID
		End Get
		Set
			If ((Me._TransactionID = value)  _
						= false) Then
				Me.OnTransactionIDChanging(value)
				Me.SendPropertyChanging
				Me._TransactionID = value
				Me.SendPropertyChanged("TransactionID")
				Me.OnTransactionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionDate", DbType:="DateTime NOT NULL")>  _
	Public Property TransactionDate() As Date
		Get
			Return Me._TransactionDate
		End Get
		Set
			If ((Me._TransactionDate = value)  _
						= false) Then
				Me.OnTransactionDateChanging(value)
				Me.SendPropertyChanging
				Me._TransactionDate = value
				Me.SendPropertyChanged("TransactionDate")
				Me.OnTransactionDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Method", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Method() As String
		Get
			Return Me._Method
		End Get
		Set
			If (String.Equals(Me._Method, value) = false) Then
				Me.OnMethodChanging(value)
				Me.SendPropertyChanging
				Me._Method = value
				Me.SendPropertyChanged("Method")
				Me.OnMethodChanged
			End If
		End Set
	End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Debit", DbType:="Float NOT NULL", CanBeNull:=False)>
    Public Property Debit() As Single
        Get
            Return Me._Debit
        End Get
        Set
            If (Object.Equals(Me._Debit, Value) = False) Then
                Me.OnDebitChanging(Value)
                Me.SendPropertyChanging()
                Me._Debit = Value
                Me.SendPropertyChanged("Debit")
                Me.OnDebitChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Credit", DbType:="Float NOT NULL")>  _
	Public Property Credit() As Single
		Get
			Return Me._Credit
		End Get
		Set
			If ((Me._Credit = value)  _
						= false) Then
				Me.OnCreditChanging(value)
				Me.SendPropertyChanging
				Me._Credit = value
				Me.SendPropertyChanged("Credit")
				Me.OnCreditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Promotion", DbType:="Float NOT NULL")>  _
	Public Property Promotion() As Single
		Get
			Return Me._Promotion
		End Get
		Set
			If ((Me._Promotion = value)  _
						= false) Then
				Me.OnPromotionChanging(value)
				Me.SendPropertyChanging
				Me._Promotion = value
				Me.SendPropertyChanged("Promotion")
				Me.OnPromotionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reason", DbType:="NChar(255)")>  _
	Public Property Reason() As String
		Get
			Return Me._Reason
		End Get
		Set
			If (String.Equals(Me._Reason, value) = false) Then
				Me.OnReasonChanging(value)
				Me.SendPropertyChanging
				Me._Reason = value
				Me.SendPropertyChanged("Reason")
				Me.OnReasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Product", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Product() As String
		Get
			Return Me._Product
		End Get
		Set
			If (String.Equals(Me._Product, value) = false) Then
				Me.OnProductChanging(value)
				Me.SendPropertyChanging
				Me._Product = value
				Me.SendPropertyChanged("Product")
				Me.OnProductChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductUserName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property ProductUserName() As String
		Get
			Return Me._ProductUserName
		End Get
		Set
			If (String.Equals(Me._ProductUserName, value) = false) Then
				Me.OnProductUserNameChanging(value)
				Me.SendPropertyChanging
				Me._ProductUserName = value
				Me.SendPropertyChanged("ProductUserName")
				Me.OnProductUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bank", DbType:="NChar(30)")>  _
	Public Property Bank() As String
		Get
			Return Me._Bank
		End Get
		Set
			If (String.Equals(Me._Bank, value) = false) Then
				Me.OnBankChanging(value)
				Me.SendPropertyChanging
				Me._Bank = value
				Me.SendPropertyChanged("Bank")
				Me.OnBankChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAccount", DbType:="NChar(30)")>  _
	Public Property BankAccount() As String
		Get
			Return Me._BankAccount
		End Get
		Set
			If (String.Equals(Me._BankAccount, value) = false) Then
				Me.OnBankAccountChanging(value)
				Me.SendPropertyChanging
				Me._BankAccount = value
				Me.SendPropertyChanged("BankAccount")
				Me.OnBankAccountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UploadFile", DbType:="NChar(255)")>  _
	Public Property UploadFile() As String
		Get
			Return Me._UploadFile
		End Get
		Set
			If (String.Equals(Me._UploadFile, value) = false) Then
				Me.OnUploadFileChanging(value)
				Me.SendPropertyChanging
				Me._UploadFile = value
				Me.SendPropertyChanged("UploadFile")
				Me.OnUploadFileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int NOT NULL")>  _
	Public Property Status() As Integer
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPAddress", DbType:="NChar(20)")>  _
	Public Property IPAddress() As String
		Get
			Return Me._IPAddress
		End Get
		Set
			If (String.Equals(Me._IPAddress, value) = false) Then
				Me.OnIPAddressChanging(value)
				Me.SendPropertyChanging
				Me._IPAddress = value
				Me.SendPropertyChanged("IPAddress")
				Me.OnIPAddressChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblTransfer")>  _
Partial Public Class TblTransfer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TransferID As Integer
	
	Private _TransferDate As Date
	
	Private _UserName As String
	
	Private _FromProduct As String
	
	Private _FromUserName As String
	
	Private _ToProduct As String
	
	Private _ToUserName As String
	
	Private _Amount As Single
	
	Private _Status As System.Nullable(Of Integer)
	
	Private _IPAddress As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTransferIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTransferIDChanged()
    End Sub
    Partial Private Sub OnTransferDateChanging(value As Date)
    End Sub
    Partial Private Sub OnTransferDateChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnFromProductChanging(value As String)
    End Sub
    Partial Private Sub OnFromProductChanged()
    End Sub
    Partial Private Sub OnFromUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnFromUserNameChanged()
    End Sub
    Partial Private Sub OnToProductChanging(value As String)
    End Sub
    Partial Private Sub OnToProductChanged()
    End Sub
    Partial Private Sub OnToUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnToUserNameChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As Single)
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnIPAddressChanging(value As String)
    End Sub
    Partial Private Sub OnIPAddressChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransferID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TransferID() As Integer
		Get
			Return Me._TransferID
		End Get
		Set
			If ((Me._TransferID = value)  _
						= false) Then
				Me.OnTransferIDChanging(value)
				Me.SendPropertyChanging
				Me._TransferID = value
				Me.SendPropertyChanged("TransferID")
				Me.OnTransferIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransferDate", DbType:="DateTime NOT NULL")>  _
	Public Property TransferDate() As Date
		Get
			Return Me._TransferDate
		End Get
		Set
			If ((Me._TransferDate = value)  _
						= false) Then
				Me.OnTransferDateChanging(value)
				Me.SendPropertyChanging
				Me._TransferDate = value
				Me.SendPropertyChanged("TransferDate")
				Me.OnTransferDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FromProduct", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property FromProduct() As String
		Get
			Return Me._FromProduct
		End Get
		Set
			If (String.Equals(Me._FromProduct, value) = false) Then
				Me.OnFromProductChanging(value)
				Me.SendPropertyChanging
				Me._FromProduct = value
				Me.SendPropertyChanged("FromProduct")
				Me.OnFromProductChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FromUserName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property FromUserName() As String
		Get
			Return Me._FromUserName
		End Get
		Set
			If (String.Equals(Me._FromUserName, value) = false) Then
				Me.OnFromUserNameChanging(value)
				Me.SendPropertyChanging
				Me._FromUserName = value
				Me.SendPropertyChanged("FromUserName")
				Me.OnFromUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ToProduct", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property ToProduct() As String
		Get
			Return Me._ToProduct
		End Get
		Set
			If (String.Equals(Me._ToProduct, value) = false) Then
				Me.OnToProductChanging(value)
				Me.SendPropertyChanging
				Me._ToProduct = value
				Me.SendPropertyChanged("ToProduct")
				Me.OnToProductChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ToUserName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property ToUserName() As String
		Get
			Return Me._ToUserName
		End Get
		Set
			If (String.Equals(Me._ToUserName, value) = false) Then
				Me.OnToUserNameChanging(value)
				Me.SendPropertyChanging
				Me._ToUserName = value
				Me.SendPropertyChanged("ToUserName")
				Me.OnToUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Float NOT NULL")>  _
	Public Property Amount() As Single
		Get
			Return Me._Amount
		End Get
		Set
			If ((Me._Amount = value)  _
						= false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int")>  _
	Public Property Status() As System.Nullable(Of Integer)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPAddress", DbType:="NChar(20)")>  _
	Public Property IPAddress() As String
		Get
			Return Me._IPAddress
		End Get
		Set
			If (String.Equals(Me._IPAddress, value) = false) Then
				Me.OnIPAddressChanging(value)
				Me.SendPropertyChanging
				Me._IPAddress = value
				Me.SendPropertyChanged("IPAddress")
				Me.OnIPAddressChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblPromotion")>  _
Partial Public Class TblPromotion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PromoID As Integer
	
	Private _DisplayIndex As Integer
	
	Private _PromoName As String
	
	Private _PromoType As Integer
	
	Private _PromoPercent As Single
	
	Private _MaxPayout As Single
	
	Private _EnglishName As String
	
	Private _ChineseName As String
	
	Private _MalayName As String
	
	Private _EnglishTNC As String
	
	Private _ChineseTNC As String
	
	Private _MalayTNC As String
	
	Private _Status As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPromoIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPromoIDChanged()
    End Sub
    Partial Private Sub OnDisplayIndexChanging(value As Integer)
    End Sub
    Partial Private Sub OnDisplayIndexChanged()
    End Sub
    Partial Private Sub OnPromoNameChanging(value As String)
    End Sub
    Partial Private Sub OnPromoNameChanged()
    End Sub
    Partial Private Sub OnPromoTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnPromoTypeChanged()
    End Sub
    Partial Private Sub OnPromoPercentChanging(value As Single)
    End Sub
    Partial Private Sub OnPromoPercentChanged()
    End Sub
    Partial Private Sub OnMaxPayoutChanging(value As Single)
    End Sub
    Partial Private Sub OnMaxPayoutChanged()
    End Sub
    Partial Private Sub OnEnglishNameChanging(value As String)
    End Sub
    Partial Private Sub OnEnglishNameChanged()
    End Sub
    Partial Private Sub OnChineseNameChanging(value As String)
    End Sub
    Partial Private Sub OnChineseNameChanged()
    End Sub
    Partial Private Sub OnMalayNameChanging(value As String)
    End Sub
    Partial Private Sub OnMalayNameChanged()
    End Sub
    Partial Private Sub OnEnglishTNCChanging(value As String)
    End Sub
    Partial Private Sub OnEnglishTNCChanged()
    End Sub
    Partial Private Sub OnChineseTNCChanging(value As String)
    End Sub
    Partial Private Sub OnChineseTNCChanged()
    End Sub
    Partial Private Sub OnMalayTNCChanging(value As String)
    End Sub
    Partial Private Sub OnMalayTNCChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Integer)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PromoID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PromoID() As Integer
		Get
			Return Me._PromoID
		End Get
		Set
			If ((Me._PromoID = value)  _
						= false) Then
				Me.OnPromoIDChanging(value)
				Me.SendPropertyChanging
				Me._PromoID = value
				Me.SendPropertyChanged("PromoID")
				Me.OnPromoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayIndex", DbType:="Int NOT NULL")>  _
	Public Property DisplayIndex() As Integer
		Get
			Return Me._DisplayIndex
		End Get
		Set
			If ((Me._DisplayIndex = value)  _
						= false) Then
				Me.OnDisplayIndexChanging(value)
				Me.SendPropertyChanging
				Me._DisplayIndex = value
				Me.SendPropertyChanged("DisplayIndex")
				Me.OnDisplayIndexChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PromoName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property PromoName() As String
		Get
			Return Me._PromoName
		End Get
		Set
			If (String.Equals(Me._PromoName, value) = false) Then
				Me.OnPromoNameChanging(value)
				Me.SendPropertyChanging
				Me._PromoName = value
				Me.SendPropertyChanged("PromoName")
				Me.OnPromoNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PromoType", DbType:="Int NOT NULL")>  _
	Public Property PromoType() As Integer
		Get
			Return Me._PromoType
		End Get
		Set
			If ((Me._PromoType = value)  _
						= false) Then
				Me.OnPromoTypeChanging(value)
				Me.SendPropertyChanging
				Me._PromoType = value
				Me.SendPropertyChanged("PromoType")
				Me.OnPromoTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PromoPercent", DbType:="Float NOT NULL")>  _
	Public Property PromoPercent() As Single
		Get
			Return Me._PromoPercent
		End Get
		Set
			If ((Me._PromoPercent = value)  _
						= false) Then
				Me.OnPromoPercentChanging(value)
				Me.SendPropertyChanging
				Me._PromoPercent = value
				Me.SendPropertyChanged("PromoPercent")
				Me.OnPromoPercentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaxPayout", DbType:="Float NOT NULL")>  _
	Public Property MaxPayout() As Single
		Get
			Return Me._MaxPayout
		End Get
		Set
			If ((Me._MaxPayout = value)  _
						= false) Then
				Me.OnMaxPayoutChanging(value)
				Me.SendPropertyChanging
				Me._MaxPayout = value
				Me.SendPropertyChanged("MaxPayout")
				Me.OnMaxPayoutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnglishName", DbType:="NChar(30)")>  _
	Public Property EnglishName() As String
		Get
			Return Me._EnglishName
		End Get
		Set
			If (String.Equals(Me._EnglishName, value) = false) Then
				Me.OnEnglishNameChanging(value)
				Me.SendPropertyChanging
				Me._EnglishName = value
				Me.SendPropertyChanged("EnglishName")
				Me.OnEnglishNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChineseName", DbType:="NChar(30)")>  _
	Public Property ChineseName() As String
		Get
			Return Me._ChineseName
		End Get
		Set
			If (String.Equals(Me._ChineseName, value) = false) Then
				Me.OnChineseNameChanging(value)
				Me.SendPropertyChanging
				Me._ChineseName = value
				Me.SendPropertyChanged("ChineseName")
				Me.OnChineseNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MalayName", DbType:="NChar(30)")>  _
	Public Property MalayName() As String
		Get
			Return Me._MalayName
		End Get
		Set
			If (String.Equals(Me._MalayName, value) = false) Then
				Me.OnMalayNameChanging(value)
				Me.SendPropertyChanging
				Me._MalayName = value
				Me.SendPropertyChanged("MalayName")
				Me.OnMalayNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnglishTNC", DbType:="NChar(255)")>  _
	Public Property EnglishTNC() As String
		Get
			Return Me._EnglishTNC
		End Get
		Set
			If (String.Equals(Me._EnglishTNC, value) = false) Then
				Me.OnEnglishTNCChanging(value)
				Me.SendPropertyChanging
				Me._EnglishTNC = value
				Me.SendPropertyChanged("EnglishTNC")
				Me.OnEnglishTNCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChineseTNC", DbType:="NChar(255)")>  _
	Public Property ChineseTNC() As String
		Get
			Return Me._ChineseTNC
		End Get
		Set
			If (String.Equals(Me._ChineseTNC, value) = false) Then
				Me.OnChineseTNCChanging(value)
				Me.SendPropertyChanging
				Me._ChineseTNC = value
				Me.SendPropertyChanged("ChineseTNC")
				Me.OnChineseTNCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MalayTNC", DbType:="NChar(255)")>  _
	Public Property MalayTNC() As String
		Get
			Return Me._MalayTNC
		End Get
		Set
			If (String.Equals(Me._MalayTNC, value) = false) Then
				Me.OnMalayTNCChanging(value)
				Me.SendPropertyChanging
				Me._MalayTNC = value
				Me.SendPropertyChanged("MalayTNC")
				Me.OnMalayTNCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int NOT NULL")>  _
	Public Property Status() As Integer
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblBank")>  _
Partial Public Class TblBank
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BankID As Integer
	
	Private _BankName As String
	
	Private _AccountName As String
	
	Private _AccountNo As String
	
	Private _Status As Integer
	
	Private _BankWeb As String
	
	Private _MinAmount As Single
	
	Private _MaxAmount As Single
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBankIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBankIDChanged()
    End Sub
    Partial Private Sub OnBankNameChanging(value As String)
    End Sub
    Partial Private Sub OnBankNameChanged()
    End Sub
    Partial Private Sub OnAccountNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNameChanged()
    End Sub
    Partial Private Sub OnAccountNoChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNoChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Integer)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnBankWebChanging(value As String)
    End Sub
    Partial Private Sub OnBankWebChanged()
    End Sub
    Partial Private Sub OnMinAmountChanging(value As Single)
    End Sub
    Partial Private Sub OnMinAmountChanged()
    End Sub
    Partial Private Sub OnMaxAmountChanging(value As Single)
    End Sub
    Partial Private Sub OnMaxAmountChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BankID() As Integer
		Get
			Return Me._BankID
		End Get
		Set
			If ((Me._BankID = value)  _
						= false) Then
				Me.OnBankIDChanging(value)
				Me.SendPropertyChanging
				Me._BankID = value
				Me.SendPropertyChanged("BankID")
				Me.OnBankIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property BankName() As String
		Get
			Return Me._BankName
		End Get
		Set
			If (String.Equals(Me._BankName, value) = false) Then
				Me.OnBankNameChanging(value)
				Me.SendPropertyChanging
				Me._BankName = value
				Me.SendPropertyChanged("BankName")
				Me.OnBankNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property AccountName() As String
		Get
			Return Me._AccountName
		End Get
		Set
			If (String.Equals(Me._AccountName, value) = false) Then
				Me.OnAccountNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountName = value
				Me.SendPropertyChanged("AccountName")
				Me.OnAccountNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountNo", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property AccountNo() As String
		Get
			Return Me._AccountNo
		End Get
		Set
			If (String.Equals(Me._AccountNo, value) = false) Then
				Me.OnAccountNoChanging(value)
				Me.SendPropertyChanging
				Me._AccountNo = value
				Me.SendPropertyChanged("AccountNo")
				Me.OnAccountNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Int NOT NULL")>  _
	Public Property Status() As Integer
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankWeb", DbType:="NChar(255)")>  _
	Public Property BankWeb() As String
		Get
			Return Me._BankWeb
		End Get
		Set
			If (String.Equals(Me._BankWeb, value) = false) Then
				Me.OnBankWebChanging(value)
				Me.SendPropertyChanging
				Me._BankWeb = value
				Me.SendPropertyChanged("BankWeb")
				Me.OnBankWebChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MinAmount", DbType:="Float NOT NULL")>  _
	Public Property MinAmount() As Single
		Get
			Return Me._MinAmount
		End Get
		Set
			If ((Me._MinAmount = value)  _
						= false) Then
				Me.OnMinAmountChanging(value)
				Me.SendPropertyChanging
				Me._MinAmount = value
				Me.SendPropertyChanged("MinAmount")
				Me.OnMinAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaxAmount", DbType:="Float NOT NULL")>  _
	Public Property MaxAmount() As Single
		Get
			Return Me._MaxAmount
		End Get
		Set
			If ((Me._MaxAmount = value)  _
						= false) Then
				Me.OnMaxAmountChanging(value)
				Me.SendPropertyChanging
				Me._MaxAmount = value
				Me.SendPropertyChanged("MaxAmount")
				Me.OnMaxAmountChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblProduct")>  _
Partial Public Class TblProduct
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductID As Integer
	
	Private _ProductName As String
	
	Private _ProductAlias As String
	
	Private _Balance As Single
	
	Private _Status As Boolean
	
	Private _AndroidLink As String
	
	Private _iOSLink As String
	
	Private _WindowsLink As String
	
	Private _WebsiteUrl As String
	
	Private _ProductCategory As Integer
	
	Private _ProductImage As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnProductNameChanging(value As String)
    End Sub
    Partial Private Sub OnProductNameChanged()
    End Sub
    Partial Private Sub OnProductAliasChanging(value As String)
    End Sub
    Partial Private Sub OnProductAliasChanged()
    End Sub
    Partial Private Sub OnBalanceChanging(value As Single)
    End Sub
    Partial Private Sub OnBalanceChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Boolean)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnAndroidLinkChanging(value As String)
    End Sub
    Partial Private Sub OnAndroidLinkChanged()
    End Sub
    Partial Private Sub OniOSLinkChanging(value As String)
    End Sub
    Partial Private Sub OniOSLinkChanged()
    End Sub
    Partial Private Sub OnWindowsLinkChanging(value As String)
    End Sub
    Partial Private Sub OnWindowsLinkChanged()
    End Sub
    Partial Private Sub OnWebsiteUrlChanging(value As String)
    End Sub
    Partial Private Sub OnWebsiteUrlChanged()
    End Sub
    Partial Private Sub OnProductCategoryChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductCategoryChanged()
    End Sub
    Partial Private Sub OnProductImageChanging(value As String)
    End Sub
    Partial Private Sub OnProductImageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ProductID() As Integer
		Get
			Return Me._ProductID
		End Get
		Set
			If ((Me._ProductID = value)  _
						= false) Then
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="NChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property ProductName() As String
		Get
			Return Me._ProductName
		End Get
		Set
			If (String.Equals(Me._ProductName, value) = false) Then
				Me.OnProductNameChanging(value)
				Me.SendPropertyChanging
				Me._ProductName = value
				Me.SendPropertyChanged("ProductName")
				Me.OnProductNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductAlias", DbType:="NChar(30)")>  _
	Public Property ProductAlias() As String
		Get
			Return Me._ProductAlias
		End Get
		Set
			If (String.Equals(Me._ProductAlias, value) = false) Then
				Me.OnProductAliasChanging(value)
				Me.SendPropertyChanging
				Me._ProductAlias = value
				Me.SendPropertyChanged("ProductAlias")
				Me.OnProductAliasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Balance", DbType:="Float NOT NULL")>  _
	Public Property Balance() As Single
		Get
			Return Me._Balance
		End Get
		Set
			If ((Me._Balance = value)  _
						= false) Then
				Me.OnBalanceChanging(value)
				Me.SendPropertyChanging
				Me._Balance = value
				Me.SendPropertyChanged("Balance")
				Me.OnBalanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Bit NOT NULL")>  _
	Public Property Status() As Boolean
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AndroidLink", DbType:="NChar(255)")>  _
	Public Property AndroidLink() As String
		Get
			Return Me._AndroidLink
		End Get
		Set
			If (String.Equals(Me._AndroidLink, value) = false) Then
				Me.OnAndroidLinkChanging(value)
				Me.SendPropertyChanging
				Me._AndroidLink = value
				Me.SendPropertyChanged("AndroidLink")
				Me.OnAndroidLinkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_iOSLink", DbType:="NChar(255)")>  _
	Public Property iOSLink() As String
		Get
			Return Me._iOSLink
		End Get
		Set
			If (String.Equals(Me._iOSLink, value) = false) Then
				Me.OniOSLinkChanging(value)
				Me.SendPropertyChanging
				Me._iOSLink = value
				Me.SendPropertyChanged("iOSLink")
				Me.OniOSLinkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WindowsLink", DbType:="NChar(255)")>  _
	Public Property WindowsLink() As String
		Get
			Return Me._WindowsLink
		End Get
		Set
			If (String.Equals(Me._WindowsLink, value) = false) Then
				Me.OnWindowsLinkChanging(value)
				Me.SendPropertyChanging
				Me._WindowsLink = value
				Me.SendPropertyChanged("WindowsLink")
				Me.OnWindowsLinkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WebsiteUrl", DbType:="NChar(255)")>  _
	Public Property WebsiteUrl() As String
		Get
			Return Me._WebsiteUrl
		End Get
		Set
			If (String.Equals(Me._WebsiteUrl, value) = false) Then
				Me.OnWebsiteUrlChanging(value)
				Me.SendPropertyChanging
				Me._WebsiteUrl = value
				Me.SendPropertyChanged("WebsiteUrl")
				Me.OnWebsiteUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductCategory", DbType:="Int NOT NULL")>  _
	Public Property ProductCategory() As Integer
		Get
			Return Me._ProductCategory
		End Get
		Set
			If ((Me._ProductCategory = value)  _
						= false) Then
				Me.OnProductCategoryChanging(value)
				Me.SendPropertyChanging
				Me._ProductCategory = value
				Me.SendPropertyChanged("ProductCategory")
				Me.OnProductCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductImage", DbType:="NChar(255)")>  _
	Public Property ProductImage() As String
		Get
			Return Me._ProductImage
		End Get
		Set
			If (String.Equals(Me._ProductImage, value) = false) Then
				Me.OnProductImageChanging(value)
				Me.SendPropertyChanging
				Me._ProductImage = value
				Me.SendPropertyChanged("ProductImage")
				Me.OnProductImageChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
